{"version":3,"sources":["reducers/toDoReducer.js","actions/types.js","store.js","components/InputToDo/inputtodo.js","actions/actionsCreators.js","components/ToDo/todo.js","components/ToDoList/todolist.js","App.js","serviceWorker.js","index.js"],"names":["toDoReducer","state","action","type","todo","slice","index","length","store","createStore","Input","input","handleOnChange","e","preventDefault","setState","target","value","handleOnClick","props","addTodo","className","onChange","this","onClick","Component","connect","dispatch","addTodoAction","ToDo","deleteTodo","deleteTodoAction","TodoList","todos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAeeA,EAbI,WAAoB,IAAnBC,EAAkB,uDAAZ,GAAGC,EAAS,uCACnC,OAAOA,EAAOC,MACV,ICJiB,WDKb,MAAM,GAAN,mBAAWF,GAAX,CAAiBC,EAAOE,OAC3B,ICLmB,cDMf,MAAM,GAAN,mBAAWH,EAAMI,MAAM,EAAEH,EAAOI,QAAhC,YAA0CL,EAAMI,MAAMH,EAAOI,MAAM,EAAEL,EAAMM,UAChF,QACI,OAAON,IEJHO,EAFHC,YAAYT,G,4BCGlBU,G,kNACFT,MAAM,CACJU,MAAM,I,EAGRC,eAAgB,SAAAC,GACZA,EAAEC,iBACF,EAAKC,SAAS,CACVJ,MAAME,EAAEG,OAAOC,S,EAIvBC,cAAe,WACX,EAAKH,SAAS,CAACJ,MAAM,KACrB,EAAKQ,MAAMC,QAAQ,EAAKnB,MAAMU,Q,uDAG9B,OACI,6BAASU,UAAU,cACnB,oDACA,2BAAOC,SAAUC,KAAKX,eACtBK,MAAOM,KAAKtB,MAAMU,QAClB,4BAAQU,UAAU,eAAeG,QAASD,KAAKL,eAA/C,Y,GAtBQO,cAiCLC,cAAQ,MAHE,SAACC,GAAD,MAAa,CAClCP,QAAQ,SAAChB,GAAQuB,ECnCQ,SAAAvB,GAAI,MAAI,CACjCD,KHHoB,WGIpBC,KAAKA,GDiCqBwB,CAAcxB,QAE7BsB,CAAkChB,GElC3CmB,G,kNAEAX,cAAc,WACZ,EAAKC,MAAMW,WAAW,EAAKX,MAAMb,Q,uDAGnC,OACG,6BAASe,UAAU,gBACf,2BAAIE,KAAKJ,MAAMf,MACf,uBAAGoB,QAASD,KAAKL,eAAjB,U,GATMO,cAwBJC,cAAQ,MAHE,SAACC,GAAD,MAAa,CAClCG,WAAW,SAACxB,GAASqB,EDnBO,SAAArB,GAAK,MACjC,CACIH,KHTmB,cGUnBG,SCgB0ByB,CAAiBzB,QAEpCoB,CAAkCG,GCxB3CG,G,6KAGF,OACI,yBAAKX,UAAU,mBACbE,KAAKJ,MAAMc,MAAMC,KAAI,SAAC9B,EAAKE,GACxB,OAAO,kBAAC,EAAD,CAAM6B,IAAK7B,EAAOA,MAAOA,EAAOF,KAAMA,Y,GANnCqB,cAcRC,eADO,SAAAzB,GAAK,MAAG,CAACgC,MAAMhC,KACG,KAAzByB,CAA+BM,G,MCO/BI,MAlBf,WACE,OACE,kBAAC,IAAD,CAAU5B,MAAOA,GACjB,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAChB,yCAIF,0BAAMA,UAAU,aAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,UCPcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cb47d5be.chunk.js","sourcesContent":["import { ADD_TODO, DELETE_TODO } from \"../actions/types\";\n\nconst toDoReducer =(state=[],action)=>{\n   switch(action.type){\n       case ADD_TODO:\n           return [...state,action.todo];\n        case DELETE_TODO:\n            return [...state.slice(0,action.index),...state.slice(action.index+1,state.length)]\n       default:\n           return state    \n\n   }\n\n}\n\nexport default toDoReducer","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';","import {createStore} from 'redux'\nimport toDoReducer from \"./reducers/toDoReducer\";\n\nconst store=createStore(toDoReducer) \n\nexport default store;","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport {addTodoAction} from '../../actions/actionsCreators'\nimport \"./inputtodo.css\"\n\n\nclass Input extends Component{\n    state={\n      input:''\n    }\n\n    handleOnChange= e =>{\n        e.preventDefault()\n        this.setState({\n            input:e.target.value\n        })\n    }\n\n    handleOnClick= () =>{\n        this.setState({input:''})\n        this.props.addTodo(this.state.input);\n    }\n    render(){\n        return(\n            <section className=\"input-todo\">  \n            <label> Write your note:</label>\n            <input onChange={this.handleOnChange}\n            value={this.state.input}/>\n            <button className=\"input-button\" onClick={this.handleOnClick}>Add</button>\n            </section>\n        )\n    }\n}\n\n\n\nconst mapDispatchToProps=(dispatch)=>({\n    addTodo:(todo)=>{dispatch(addTodoAction(todo))}\n})\nexport default connect(null, mapDispatchToProps)(Input)\n\n","import{ ADD_TODO, DELETE_TODO } from \"./types\"\n\nexport const addTodoAction = todo =>({\n    type:ADD_TODO,\n    todo:todo\n})\n\n\nexport const deleteTodoAction = index =>(\n    {\n        type: DELETE_TODO,\n        index\n    }\n)\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {deleteTodoAction} from '../../actions/actionsCreators'\nimport \"./todo.css\"\n\nclass ToDo extends Component{\n\n      handleOnClick=()=>{\n        this.props.deleteTodo(this.props.index);\n      }\n    render(){\n      return(\n         <section className=\"section-todo\">\n             <p>{this.props.todo}</p>\n             <p onClick={this.handleOnClick}>\n               x\n             </p>\n         </section>\n      )\n}\n\n}\n\n\n\n\nconst mapDispatchToProps=(dispatch)=>({\n    deleteTodo:(index)=>{dispatch(deleteTodoAction(index))}\n})\nexport default connect(null, mapDispatchToProps)(ToDo)\n\n\n\n","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport ToDo from '../ToDo/todo'\nimport \"./todolist.css\"\n\nclass TodoList extends Component{\n\nrender(){\n    return(\n        <div className=\"container-todos\">\n         {this.props.todos.map((todo,index)=>{\n             return(<ToDo key={index} index={index} todo={todo}/>)\n         })}   \n       </div>\n    )\n}\n\n}\nconst mapStateToProps=state=>({todos:state})\nexport default connect(mapStateToProps, null)(TodoList);\n\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Input from './components/InputToDo/inputtodo'\nimport TodoList from './components/ToDoList/todolist'\nimport \"./App.css\"\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          TODO APP\n        </h1>\n      </header>\n      <main className=\"container\">\n      <Input/>\n      <TodoList/>\n      </main> \n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}